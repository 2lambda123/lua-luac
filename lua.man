.\" $Id: lua.man,v 1.4 2001/07/19 20:06:36 lhf Exp lhf $
.TH LUA 1 "$Date: 2001/07/19 20:06:36 $"
.SH NAME
lua \- Lua interpreter
.SH SYNOPSIS
.B lua
[
.I arguments
]
.SH DESCRIPTION
.B lua
is the stand-alone Lua interpreter.
It loads and executes Lua programs,
either in textual source form or
in precompiled binary form.
(Precompiled binaries are output by
.BR luac ,
the Lua compiler.)
.B lua
can be used as a batch interpreter and also interactively.
.LP
The
.I arguments
can be options, assignments, or filenames,
and are processed in order,
from left to right.
.LP
Options start with
.B \-
and are described below.
.LP
An assignment is an argument of the form
.BR a=b ,
which assigns the string
.RB ` b '
to the global variable
.BR a .
Note that,
in this special command-line form,
no quotes are needed around the string if it does not contain spaces
or other characters special to the shell.
This is for convenience only.
(In general,
you should be careful when using quotes and spaces on the command line
because they are usually handled by the shell.)
.LP
If the argument is neither an option nor an assignment,
then it is assumed to be a filename,
which is then loaded and executed.
.LP
If no arguments are given,
then
.B "\-v \-i"
is assumed when the standard input is a terminal;
otherwise,
.B "\-"
is assumed.
Interactive mode is explained in detail below.
.SH OPTIONS
.TP
.B \-
load the standard input as a file,
that is,
not interactively,
even when the standard input is a terminal.
.TP
.B \-c
close Lua before exiting
(that is,
after all arguments have been processed).
.TP
.BI \-e " stat"
execute statement
.IR stat .
You need to quote
.I stat 
if it contains spaces, quotes,
or other characters special to the shell.
.TP
.BI \-f " file"
collect all remaining arguments as strings into a global table named
.B arg
and then execute
.IR file .
The arguments in
.B arg
start at 0,
which contains the string
.RI ` file '.
The index of the last argument is stored in
.BR "arg.n" .
.TP
.B \-i
enter interactive mode,
displaying a prompt.
In this mode,
.B lua
reads lines from the standard input and executes them as they are read.
If a line does not contain a complete statement,
then a secondary prompt is displayed and
lines are read until a complete statement is formed or
a syntax error is found.
So, one way to interrupt the reading of an incomplete statement is
to force a syntax error:
adding a
.B `;' 
in the middle of a statement is a sure way of forcing a syntax error
(except inside multiline strings and comments; these must be closed explicitly).

If a line starts with
.BR `=' ,
then
.B lua
displays the values of all the expressions in the remainder of the
line. The expressions must be separated by commas.

The primary prompt is the value of the global variable
.BR _PROMPT ,
if this value is a string;
otherwise, the default prompt is used.
Similarly, the secondary prompt is the value of the global variable
.BR _PROMPT2 .
So,
to change the prompts,
set the corresponding variable to a string of your choice.
You can do that after calling the interpreter
or on the command line with
.BR "_PROMPT" "=\'lua: \'" ,
for example.
(Note the need for quotes, because the string contains a space.)
The default prompts are ``> '' and ``>> ''.

.TP
.B \-v
print version information.
.SH "SEE ALSO"
.BR luac (1)
.br
http://www.lua.org/
.SH DIAGNOSTICS
Error messages should be self explanatory.
.SH AUTHORS
R. Ierusalimschy,
L. H. de Figueiredo,
and
W. Celes
(lua@tecgraf.puc-rio.br)
.\" EOF
